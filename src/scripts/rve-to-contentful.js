// src/scripts/invoiceGenerator.js
import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";

export function generateInvoicePDF(point, outputDir = "./invoices") {
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const filename = path.join(outputDir, `${point.name.replace(/\s+/g, "_")}.pdf`);
  const doc = new PDFDocument({ margin: 50 });
  doc.pipe(fs.createWriteStream(filename));

  // --- HEADER ---
  doc
    .fontSize(20)
    .text("Invoice", { align: "center" })
    .moveDown();

  doc
    .fontSize(12)
    .text(`Station: ${point.name}`)
    .text(`Location: ${point.location}`)
    .text(`UUID: ${point.uuid}`)
    .moveDown();

  // --- TOTALS ---
  doc
    .fontSize(14)
    .text("Summary", { underline: true })
    .moveDown(0.5);

  doc
    .fontSize(12)
    .text(`Reads Consumption (kWh): ${point.consumption.toFixed(1)}`)
    .text(`CDR Consumption (kWh): ${point.cdrConsumption.toFixed(1)}`)
    .moveDown();

  // --- CDR TABLE ---
  doc.fontSize(14).text("CDR Sessions", { underline: true }).moveDown(0.5);

  const tableTop = doc.y;
  const rowHeight = 20;
  const colWidths = [100, 150, 150, 100];

  // Headers
  doc.fontSize(12).text("Date", 50, tableTop);
  doc.text("Start Time", 150, tableTop);
  doc.text("End Time", 300, tableTop);
  doc.text("Energy (kWh)", 450, tableTop);

  doc.moveTo(50, tableTop + 15).lineTo(550, tableTop + 15).stroke();

  // Rows
  let y = tableTop + rowHeight;
  for (const session of point.cdrSessions) {
    doc.text(session.date, 50, y);
    doc.text(session.startTime, 150, y, { width: colWidths[1] });
    doc.text(session.endTime, 300, y, { width: colWidths[2] });
    doc.text(session.energy.toFixed(1), 450, y);
    y += rowHeight;

    // Page break if needed
    if (y > doc.page.height - 50) {
      doc.addPage();
      y = 50;
    }
  }

  // --- FOOTER ---
  doc.moveDown(2);
  doc.fontSize(10).text("Generated by CloudOceanService", { align: "center" });

  doc.end();
  console.log(`âœ… Invoice saved: ${filename}`);
}
